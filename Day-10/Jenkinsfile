pipeline {
    agent any

    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'qa', 'staging'],
            description: 'Select deployment environment'
        )
        string(
            name: 'BACKEND_TAG',
            defaultValue: 'latest',
            description: 'Backend Docker image tag'
        )
        string(
            name: 'FRONTEND_TAG',
            defaultValue: 'latest',
            description: 'Frontend Docker image tag'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: 'Skip smoke tests after deployment'
        )
    }

    environment {
        DOCKER_HUB_USERNAME = 'toktechteam'
        BACKEND_IMAGE = "${DOCKER_HUB_USERNAME}/student-backend:${params.BACKEND_TAG}"
        FRONTEND_IMAGE = "${DOCKER_HUB_USERNAME}/student-frontend:${params.FRONTEND_TAG}"
        COMPOSE_FILE = "docker-compose-${params.ENVIRONMENT}.yml"
        DOCKER_DIR = "${WORKSPACE}/Day-09/docker"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Checking out code from repository..."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        credentialsId: 'github_cred',
                        url: 'https://github.com/toktechteam/15-Days-DevOps-Job-Journey.git'
                    ]]
                ])

                echo "‚úÖ Code checked out successfully"
                sh "ls -la ${WORKSPACE}"
            }
        }

        stage('Verify Setup') {
            steps {
                script {
                    echo "üîç Verifying docker-compose files exist..."
                    sh '''
                        echo "Workspace: ${WORKSPACE}"
                        echo "Docker directory: ${DOCKER_DIR}"

                        if [ ! -d "${DOCKER_DIR}" ]; then
                            echo "‚ùå Docker directory not found: ${DOCKER_DIR}"
                            exit 1
                        fi

                        if [ ! -f "${DOCKER_DIR}/${COMPOSE_FILE}" ]; then
                            echo "‚ùå Compose file not found: ${DOCKER_DIR}/${COMPOSE_FILE}"
                            echo "Available files in docker directory:"
                            ls -la ${DOCKER_DIR}/
                            exit 1
                        fi

                        echo "‚úÖ Setup verified - ${COMPOSE_FILE} found"
                    '''
                }
            }
        }

        stage('Update Image Tags') {
            steps {
                script {
                    echo "üìù Updating image tags in ${COMPOSE_FILE}..."
                    sh '''
                        cd ${DOCKER_DIR}

                        echo "Current directory: $(pwd)"
                        echo "Updating compose file: ${COMPOSE_FILE}"

                        # Show current image lines
                        echo "üìÑ Current image tags:"
                        grep "image: ${DOCKER_HUB_USERNAME}" ${COMPOSE_FILE} || echo "No existing images found"

                        # Update backend image tag
                        sed -i "s|image: ${DOCKER_HUB_USERNAME}/student-backend:.*|image: ${BACKEND_IMAGE}|g" ${COMPOSE_FILE}

                        # Update frontend image tag
                        sed -i "s|image: ${DOCKER_HUB_USERNAME}/student-frontend:.*|image: ${FRONTEND_IMAGE}|g" ${COMPOSE_FILE}

                        echo "‚úÖ Updated image tags:"
                        echo "Backend: ${BACKEND_IMAGE}"
                        echo "Frontend: ${FRONTEND_IMAGE}"

                        # Show updated lines
                        echo "üìÑ New image tags:"
                        grep "image: ${DOCKER_HUB_USERNAME}" ${COMPOSE_FILE}
                    '''
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    echo "üöÄ Deploying ${params.ENVIRONMENT} environment..."
                    sh '''
                        cd ${DOCKER_DIR}

                        echo "Working directory: $(pwd)"
                        echo "Using compose file: ${COMPOSE_FILE}"

                        # Show current container status
                        echo "üìä Current container status:"
                        docker-compose -f ${COMPOSE_FILE} ps || echo "No containers running yet"

                        # Stop and remove old application containers (keep DB running)
                        echo "üõë Stopping old application containers..."
                        docker-compose -f ${COMPOSE_FILE} stop frontend backend || echo "No containers to stop"
                        docker-compose -f ${COMPOSE_FILE} rm -f frontend backend || echo "No containers to remove"

                        # Start application containers with new images
                        echo "üöÄ Starting application containers..."
                        docker-compose -f ${COMPOSE_FILE} up -d frontend backend

                        # Wait for services to start
                        echo "‚è≥ Waiting for services to start..."
                        sleep 20

                        # Show container status
                        echo "üìä Final container status:"
                        docker-compose -f ${COMPOSE_FILE} ps
                    '''
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "üè• Running health checks..."
                    sh '''
                        cd ${DOCKER_DIR}

                        # Get backend port based on environment
                        if [ "${ENVIRONMENT}" = "dev" ]; then
                            BACKEND_PORT=3000
                            FRONTEND_PORT=8080
                        elif [ "${ENVIRONMENT}" = "qa" ]; then
                            BACKEND_PORT=3001
                            FRONTEND_PORT=8082
                        else
                            BACKEND_PORT=3002
                            FRONTEND_PORT=8083
                        fi

                        echo "Environment: ${ENVIRONMENT}"
                        echo "Backend port: ${BACKEND_PORT}"
                        echo "Frontend port: ${FRONTEND_PORT}"

                        # Check backend health
                        echo "Checking backend health on port ${BACKEND_PORT}..."
                        for i in {1..10}; do
                            if curl -f http://localhost:${BACKEND_PORT}/health 2>/dev/null; then
                                echo "‚úÖ Backend is healthy"
                                BACKEND_HEALTHY=true
                                break
                            fi
                            echo "‚è≥ Waiting for backend... (attempt $i/10)"
                            sleep 5
                        done

                        # Check frontend accessibility
                        echo "Checking frontend on port ${FRONTEND_PORT}..."
                        if curl -f http://localhost:${FRONTEND_PORT} 2>/dev/null; then
                            echo "‚úÖ Frontend is accessible"
                        else
                            echo "‚ö†Ô∏è Frontend check failed, but continuing..."
                        fi

                        # Show final status
                        echo "üìä Final Container Status:"
                        docker-compose -f ${COMPOSE_FILE} ps

                        # Show container logs if backend is not healthy
                        if [ "${BACKEND_HEALTHY}" != "true" ]; then
                            echo "üîç Backend logs (last 20 lines):"
                            docker-compose -f ${COMPOSE_FILE} logs --tail=20 backend || echo "Could not get logs"
                        fi
                    '''
                }
            }
        }

        stage('Smoke Tests') {
            when {
                expression { !params.SKIP_TESTS }
            }
            steps {
                script {
                    echo "üß™ Running smoke tests..."
                    sh '''
                        cd ${DOCKER_DIR}

                        # Get backend port
                        if [ "${ENVIRONMENT}" = "dev" ]; then
                            BACKEND_PORT=3000
                        elif [ "${ENVIRONMENT}" = "qa" ]; then
                            BACKEND_PORT=3001
                        else
                            BACKEND_PORT=3002
                        fi

                        # Test API endpoint
                        echo "Testing API endpoint on port ${BACKEND_PORT}..."
                        if curl -f "http://localhost:${BACKEND_PORT}/api/students" 2>/dev/null; then
                            echo "‚úÖ API endpoint test passed"
                        else
                            echo "‚ö†Ô∏è API endpoint test failed but continuing..."
                            echo "üîç Checking if backend container is running:"
                            docker-compose -f ${COMPOSE_FILE} ps backend
                        fi

                        echo "‚úÖ Smoke tests completed"
                    '''
                }
            }
        }

        stage('Deployment Summary') {
            steps {
                script {
                    sh '''
                        cd ${DOCKER_DIR}

                        # Get ports based on environment
                        if [ "${ENVIRONMENT}" = "dev" ]; then
                            BACKEND_PORT=3000
                            FRONTEND_PORT=8081
                        elif [ "${ENVIRONMENT}" = "qa" ]; then
                            BACKEND_PORT=3001
                            FRONTEND_PORT=8082
                        else
                            BACKEND_PORT=3002
                            FRONTEND_PORT=8083
                        fi

                        echo "üéâ Deployment Summary:"
                        echo "Environment: ${ENVIRONMENT}"
                        echo "Backend Image: ${BACKEND_IMAGE}"
                        echo "Frontend Image: ${FRONTEND_IMAGE}"
                        echo ""
                        echo "üìä Running Containers:"
                        docker-compose -f ${COMPOSE_FILE} ps
                        echo ""
                        echo "üîó Access URLs:"
                        echo "Frontend: http://your-ec2-ip:${FRONTEND_PORT}"
                        echo "Backend API: http://your-ec2-ip:${BACKEND_PORT}"
                    '''
                }
            }
        }
    }

    post {
        success {
            script {
                def ports = [
                    'dev': [backend: '3000', frontend: '8081'],
                    'qa': [backend: '3001', frontend: '8082'],
                    'staging': [backend: '3002', frontend: '8083']
                ]

                echo """
üéâ Deployment Successful!

Environment: ${params.ENVIRONMENT}
Backend: ${BACKEND_IMAGE} ‚Üí http://localhost:${ports[params.ENVIRONMENT].backend}
Frontend: ${FRONTEND_IMAGE} ‚Üí http://localhost:${ports[params.ENVIRONMENT].frontend}

Workspace: ${WORKSPACE}
Docker Directory: ${DOCKER_DIR}
"""
            }
        }

        failure {
            script {
                echo """
‚ùå Deployment Failed!

Environment: ${params.ENVIRONMENT}
Workspace: ${WORKSPACE}
Docker Directory: ${DOCKER_DIR}

Check the logs above for detailed error information.
"""
            }
        }
    }
}