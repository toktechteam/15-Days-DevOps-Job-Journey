pipeline {
  agent any
  environment {
    DOCKER_USERNAME = "toktechteam"
    BACKEND_IMAGE = "${DOCKER_USERNAME}/student-backend"
    FRONTEND_IMAGE = "${DOCKER_USERNAME}/student-frontend"
  }
  stages {
    stage('Install Dependencies') {
      steps {
        sh 'cd $WORKSPACE/backend && npm install && npm install --save-dev jest jest-junit'
      }
    }

    stage('Run Tests') {
      steps {
        sh 'cd $WORKSPACE/backend/__tests__/ && npm test'
      }
    }

    stage('Run Tests with Coverage') {
      steps {
        sh 'cd $WORKSPACE/backend && npm test -- --coverage'
      }
    }

    stage('SonarQube Analysis') {
      steps {
        script {
          // Check if sonar-scanner is available
          def scannerCheck = sh(script: 'which sonar-scanner || echo "NOT_FOUND"', returnStdout: true).trim()

          if (scannerCheck == "NOT_FOUND") {
            echo "SonarQube Scanner not found in PATH. Please install it or add it to PATH."
            currentBuild.result = 'UNSTABLE'
          } else {
            // Create sonar-project.properties file if it doesn't exist
            sh '''
              if [ ! -f "$WORKSPACE/backend/sonar-project.properties" ]; then
                echo "# Required metadata" > $WORKSPACE/backend/sonar-project.properties
                echo "sonar.projectKey=student-backend" >> $WORKSPACE/backend/sonar-project.properties
                echo "sonar.projectName=Student Backend" >> $WORKSPACE/backend/sonar-project.properties
                echo "sonar.projectVersion=1.0.0" >> $WORKSPACE/backend/sonar-project.properties
                echo "" >> $WORKSPACE/backend/sonar-project.properties
                echo "# Path to source directories" >> $WORKSPACE/backend/sonar-project.properties
                echo "sonar.sources=." >> $WORKSPACE/backend/sonar-project.properties
                echo "sonar.exclusions=node_modules/**,coverage/**,__tests__/**" >> $WORKSPACE/backend/sonar-project.properties
                echo "" >> $WORKSPACE/backend/sonar-project.properties
                echo "# Path to test directories" >> $WORKSPACE/backend/sonar-project.properties
                echo "sonar.tests=__tests__" >> $WORKSPACE/backend/sonar-project.properties
                echo "sonar.test.inclusions=**/*.test.js" >> $WORKSPACE/backend/sonar-project.properties
                echo "" >> $WORKSPACE/backend/sonar-project.properties
                echo "# Source encoding" >> $WORKSPACE/backend/sonar-project.properties
                echo "sonar.sourceEncoding=UTF-8" >> $WORKSPACE/backend/sonar-project.properties
                echo "" >> $WORKSPACE/backend/sonar-project.properties
                echo "# Coverage reports" >> $WORKSPACE/backend/sonar-project.properties
                echo "sonar.javascript.lcov.reportPaths=coverage/lcov.info" >> $WORKSPACE/backend/sonar-project.properties
              fi
            '''

            // Run SonarQube analysis with error handling
            withSonarQubeEnv('SonarLocal') {
              sh 'cd $WORKSPACE/backend && sonar-scanner || echo "SonarQube analysis failed"'
            }
          }
        }
      }
    }

    stage('Build Backend Image') {
      steps {
        sh 'docker build -t $BACKEND_IMAGE:latest -f $WORKSPACE/docker/Dockerfile.backend .'
      }
    }

    stage('Build Frontend Image') {
      steps {
        sh 'docker build -t $FRONTEND_IMAGE:latest -f $WORKSPACE/docker/Dockerfile.frontend .'
      }
    }

    stage('Scan Both Images') {
      steps {
        sh '''
          trivy image $BACKEND_IMAGE:latest --format json --output $WORKSPACE/trivy-backend-report.json || echo "Trivy scan for backend failed but continuing"
          trivy image $FRONTEND_IMAGE:latest --format json --output $WORKSPACE/trivy-frontend-report.json || echo "Trivy scan for frontend failed but continuing"
        '''
      }
    }

    stage('Archive Reports') {
      steps {
        archiveArtifacts artifacts: '**/coverage/lcov.info, $WORKSPACE/trivy-*.json', fingerprint: true, allowEmptyArchive: true
      }
    }

    stage('Push to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push $BACKEND_IMAGE:latest
            docker push $FRONTEND_IMAGE:latest
          '''
        }
      }
    }
  }

  post {
    always {
      junit allowEmptyResults: true, testResults: '$WORKSPACE/backend/test-results/**/*.xml'

      // Clean up Docker images to prevent disk space issues
      sh '''
        docker rmi $BACKEND_IMAGE:latest || true
        docker rmi $FRONTEND_IMAGE:latest || true
      '''
    }
  }
}